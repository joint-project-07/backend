version: '3.8'

services:
  db:
    # PostgreSQL 데이터 베이스 컨테이너 설정
    image: postgres:latest
    # 최신 버전의 PostgreSQL 이미지 사용
    container_name: dnh-postgres-container
    # 컨테이너 이름 지정
#    restart: always
    # 컨테이너 중단 시 자동 재시작
    env_file:
      - .envs/dev.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # 개발환경에서 사용할 .env 파일
    ports:
      - "5432:5432"
    # 호스트(로컬)와 컨테이너의 PostgreSQL 포트 연결
    volumes:
      - dnh-postgres-data:/var/lib/postgresql/data
    # DB 데이터 영구 저장



  web:
    # django 웹 애플리케이션 컨테이너 설정
    build: .
    # 현재 디렉토리에서 Dockerfile을 사용해 빌드
    container_name: dnh-web-container
    # 컨테이너 이름 지정
#    restart: always
    # 컨테이너 중단 시 자동 재시작
    environment:
      - DJANGO_ENV=${DJANGO_ENV}

    depends_on:
      - db
    # db가 먼저 실행된 후 web이 시작됨
    ports:
      - "8000:8000"
    # django의 기본 포트를 컨테이너와 연결
    env_file:
      - .envs/dev.env
    # 개발환경에서 사용할 .env 파일
    volumes:
      - .:/app
      # 현재 디렉토리를 컨테이너 내 /app에 마운트
      - ./staticfiles:/app/staticfiles
      # 정적 파일 공유

  nginx:
    image: nginx:latest
    container_name: dnh-nginx-container
    depends_on:
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles

    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    # Nginx를 6시간마다 재시작하여 설정 반영

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


volumes:
  dnh-postgres-data:



